/* Auto-generated by genmsg_cpp for file /home/sid/ros_workspace/control_toolbox/srv/SetPidGains.srv */
#ifndef CONTROL_TOOLBOX_SERVICE_SETPIDGAINS_H
#define CONTROL_TOOLBOX_SERVICE_SETPIDGAINS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace control_toolbox
{
template <class ContainerAllocator>
struct SetPidGainsRequest_ {
  typedef SetPidGainsRequest_<ContainerAllocator> Type;

  SetPidGainsRequest_()
  : p(0.0)
  , i(0.0)
  , d(0.0)
  , i_clamp(0.0)
  {
  }

  SetPidGainsRequest_(const ContainerAllocator& _alloc)
  : p(0.0)
  , i(0.0)
  , d(0.0)
  , i_clamp(0.0)
  {
  }

  typedef double _p_type;
  double p;

  typedef double _i_type;
  double i;

  typedef double _d_type;
  double d;

  typedef double _i_clamp_type;
  double i_clamp;


private:
  static const char* __s_getDataType_() { return "control_toolbox/SetPidGainsRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "b06494a6fc3d5b972ded4e2a9a71535a"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "b06494a6fc3d5b972ded4e2a9a71535a"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "float64 p\n\
float64 i\n\
float64 d\n\
float64 i_clamp\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, p);
    ros::serialization::serialize(stream, i);
    ros::serialization::serialize(stream, d);
    ros::serialization::serialize(stream, i_clamp);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, p);
    ros::serialization::deserialize(stream, i);
    ros::serialization::deserialize(stream, d);
    ros::serialization::deserialize(stream, i_clamp);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(p);
    size += ros::serialization::serializationLength(i);
    size += ros::serialization::serializationLength(d);
    size += ros::serialization::serializationLength(i_clamp);
    return size;
  }

  typedef boost::shared_ptr< ::control_toolbox::SetPidGainsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::control_toolbox::SetPidGainsRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SetPidGainsRequest
typedef  ::control_toolbox::SetPidGainsRequest_<std::allocator<void> > SetPidGainsRequest;

typedef boost::shared_ptr< ::control_toolbox::SetPidGainsRequest> SetPidGainsRequestPtr;
typedef boost::shared_ptr< ::control_toolbox::SetPidGainsRequest const> SetPidGainsRequestConstPtr;


template <class ContainerAllocator>
struct SetPidGainsResponse_ {
  typedef SetPidGainsResponse_<ContainerAllocator> Type;

  SetPidGainsResponse_()
  {
  }

  SetPidGainsResponse_(const ContainerAllocator& _alloc)
  {
  }


private:
  static const char* __s_getDataType_() { return "control_toolbox/SetPidGainsResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "d41d8cd98f00b204e9800998ecf8427e"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "b06494a6fc3d5b972ded4e2a9a71535a"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    return size;
  }

  typedef boost::shared_ptr< ::control_toolbox::SetPidGainsResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::control_toolbox::SetPidGainsResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SetPidGainsResponse
typedef  ::control_toolbox::SetPidGainsResponse_<std::allocator<void> > SetPidGainsResponse;

typedef boost::shared_ptr< ::control_toolbox::SetPidGainsResponse> SetPidGainsResponsePtr;
typedef boost::shared_ptr< ::control_toolbox::SetPidGainsResponse const> SetPidGainsResponseConstPtr;

struct SetPidGains
{

typedef SetPidGainsRequest Request;
typedef SetPidGainsResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct SetPidGains
} // namespace control_toolbox

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::control_toolbox::SetPidGainsRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::control_toolbox::SetPidGainsRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::control_toolbox::SetPidGainsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b06494a6fc3d5b972ded4e2a9a71535a";
  }

  static const char* value(const  ::control_toolbox::SetPidGainsRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xb06494a6fc3d5b97ULL;
  static const uint64_t static_value2 = 0x2ded4e2a9a71535aULL;
};

template<class ContainerAllocator>
struct DataType< ::control_toolbox::SetPidGainsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "control_toolbox/SetPidGainsRequest";
  }

  static const char* value(const  ::control_toolbox::SetPidGainsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::control_toolbox::SetPidGainsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64 p\n\
float64 i\n\
float64 d\n\
float64 i_clamp\n\
\n\
";
  }

  static const char* value(const  ::control_toolbox::SetPidGainsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::control_toolbox::SetPidGainsRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::control_toolbox::SetPidGainsResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::control_toolbox::SetPidGainsResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::control_toolbox::SetPidGainsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::control_toolbox::SetPidGainsResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::control_toolbox::SetPidGainsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "control_toolbox/SetPidGainsResponse";
  }

  static const char* value(const  ::control_toolbox::SetPidGainsResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::control_toolbox::SetPidGainsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
";
  }

  static const char* value(const  ::control_toolbox::SetPidGainsResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::control_toolbox::SetPidGainsResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::control_toolbox::SetPidGainsRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.p);
    stream.next(m.i);
    stream.next(m.d);
    stream.next(m.i_clamp);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SetPidGainsRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::control_toolbox::SetPidGainsResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SetPidGainsResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<control_toolbox::SetPidGains> {
  static const char* value() 
  {
    return "b06494a6fc3d5b972ded4e2a9a71535a";
  }

  static const char* value(const control_toolbox::SetPidGains&) { return value(); } 
};

template<>
struct DataType<control_toolbox::SetPidGains> {
  static const char* value() 
  {
    return "control_toolbox/SetPidGains";
  }

  static const char* value(const control_toolbox::SetPidGains&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<control_toolbox::SetPidGainsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b06494a6fc3d5b972ded4e2a9a71535a";
  }

  static const char* value(const control_toolbox::SetPidGainsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<control_toolbox::SetPidGainsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "control_toolbox/SetPidGains";
  }

  static const char* value(const control_toolbox::SetPidGainsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<control_toolbox::SetPidGainsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b06494a6fc3d5b972ded4e2a9a71535a";
  }

  static const char* value(const control_toolbox::SetPidGainsResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<control_toolbox::SetPidGainsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "control_toolbox/SetPidGains";
  }

  static const char* value(const control_toolbox::SetPidGainsResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // CONTROL_TOOLBOX_SERVICE_SETPIDGAINS_H

