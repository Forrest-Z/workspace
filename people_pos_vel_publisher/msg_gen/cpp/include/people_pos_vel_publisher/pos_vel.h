/* Auto-generated by genmsg_cpp for file /home/sid/ros_workspace/people_pos_vel_publisher/msg/pos_vel.msg */
#ifndef PEOPLE_POS_VEL_PUBLISHER_MESSAGE_POS_VEL_H
#define PEOPLE_POS_VEL_PUBLISHER_MESSAGE_POS_VEL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace people_pos_vel_publisher
{
template <class ContainerAllocator>
struct pos_vel_ {
  typedef pos_vel_<ContainerAllocator> Type;

  pos_vel_()
  : header()
  , pos_x(0.0)
  , pos_y(0.0)
  , pos_z(0.0)
  , vel_x(0.0)
  , vel_y(0.0)
  , vel_z(0.0)
  , flag(false)
  {
  }

  pos_vel_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , pos_x(0.0)
  , pos_y(0.0)
  , pos_z(0.0)
  , vel_x(0.0)
  , vel_y(0.0)
  , vel_z(0.0)
  , flag(false)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef float _pos_x_type;
  float pos_x;

  typedef float _pos_y_type;
  float pos_y;

  typedef float _pos_z_type;
  float pos_z;

  typedef float _vel_x_type;
  float vel_x;

  typedef float _vel_y_type;
  float vel_y;

  typedef float _vel_z_type;
  float vel_z;

  typedef uint8_t _flag_type;
  uint8_t flag;


private:
  static const char* __s_getDataType_() { return "people_pos_vel_publisher/pos_vel"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "615c3d61c415114a8d492d5ac44089f1"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "# A representation of position and velocity of object\n\
Header header\n\
float32 pos_x\n\
float32 pos_y\n\
float32 pos_z\n\
float32 vel_x\n\
float32 vel_y\n\
float32 vel_z\n\
bool flag\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, header);
    ros::serialization::serialize(stream, pos_x);
    ros::serialization::serialize(stream, pos_y);
    ros::serialization::serialize(stream, pos_z);
    ros::serialization::serialize(stream, vel_x);
    ros::serialization::serialize(stream, vel_y);
    ros::serialization::serialize(stream, vel_z);
    ros::serialization::serialize(stream, flag);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, header);
    ros::serialization::deserialize(stream, pos_x);
    ros::serialization::deserialize(stream, pos_y);
    ros::serialization::deserialize(stream, pos_z);
    ros::serialization::deserialize(stream, vel_x);
    ros::serialization::deserialize(stream, vel_y);
    ros::serialization::deserialize(stream, vel_z);
    ros::serialization::deserialize(stream, flag);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(header);
    size += ros::serialization::serializationLength(pos_x);
    size += ros::serialization::serializationLength(pos_y);
    size += ros::serialization::serializationLength(pos_z);
    size += ros::serialization::serializationLength(vel_x);
    size += ros::serialization::serializationLength(vel_y);
    size += ros::serialization::serializationLength(vel_z);
    size += ros::serialization::serializationLength(flag);
    return size;
  }

  typedef boost::shared_ptr< ::people_pos_vel_publisher::pos_vel_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::people_pos_vel_publisher::pos_vel_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct pos_vel
typedef  ::people_pos_vel_publisher::pos_vel_<std::allocator<void> > pos_vel;

typedef boost::shared_ptr< ::people_pos_vel_publisher::pos_vel> pos_velPtr;
typedef boost::shared_ptr< ::people_pos_vel_publisher::pos_vel const> pos_velConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::people_pos_vel_publisher::pos_vel_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::people_pos_vel_publisher::pos_vel_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace people_pos_vel_publisher

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::people_pos_vel_publisher::pos_vel_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::people_pos_vel_publisher::pos_vel_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::people_pos_vel_publisher::pos_vel_<ContainerAllocator> > {
  static const char* value() 
  {
    return "615c3d61c415114a8d492d5ac44089f1";
  }

  static const char* value(const  ::people_pos_vel_publisher::pos_vel_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x615c3d61c415114aULL;
  static const uint64_t static_value2 = 0x8d492d5ac44089f1ULL;
};

template<class ContainerAllocator>
struct DataType< ::people_pos_vel_publisher::pos_vel_<ContainerAllocator> > {
  static const char* value() 
  {
    return "people_pos_vel_publisher/pos_vel";
  }

  static const char* value(const  ::people_pos_vel_publisher::pos_vel_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::people_pos_vel_publisher::pos_vel_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# A representation of position and velocity of object\n\
Header header\n\
float32 pos_x\n\
float32 pos_y\n\
float32 pos_z\n\
float32 vel_x\n\
float32 vel_y\n\
float32 vel_z\n\
bool flag\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::people_pos_vel_publisher::pos_vel_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::people_pos_vel_publisher::pos_vel_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::people_pos_vel_publisher::pos_vel_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::people_pos_vel_publisher::pos_vel_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.pos_x);
    stream.next(m.pos_y);
    stream.next(m.pos_z);
    stream.next(m.vel_x);
    stream.next(m.vel_y);
    stream.next(m.vel_z);
    stream.next(m.flag);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct pos_vel_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::people_pos_vel_publisher::pos_vel_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::people_pos_vel_publisher::pos_vel_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "pos_x: ";
    Printer<float>::stream(s, indent + "  ", v.pos_x);
    s << indent << "pos_y: ";
    Printer<float>::stream(s, indent + "  ", v.pos_y);
    s << indent << "pos_z: ";
    Printer<float>::stream(s, indent + "  ", v.pos_z);
    s << indent << "vel_x: ";
    Printer<float>::stream(s, indent + "  ", v.vel_x);
    s << indent << "vel_y: ";
    Printer<float>::stream(s, indent + "  ", v.vel_y);
    s << indent << "vel_z: ";
    Printer<float>::stream(s, indent + "  ", v.vel_z);
    s << indent << "flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.flag);
  }
};


} // namespace message_operations
} // namespace ros

#endif // PEOPLE_POS_VEL_PUBLISHER_MESSAGE_POS_VEL_H

